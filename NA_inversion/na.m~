%*************************************************************************

%	Main subroutine NA  - sampling a parameter space
%		      	      using a Neighbourhood algorithm

%Input files:
%	    na.in	- Options for Neighbourhood algorithm

%Output files:
%	    na.sum	- summary of results
%	    na.nad	- NAD (NA direct access file of models)
%	    sobol.coeff	- initializing data used for
%			  quasi-random sequences

%Comments:
%	 The NAD file is a direct access compact format file
%	 containing all models generated by the neighbourhood
%	 algorithm. (NAD files can be read in by multi-dimensional
%	 integration program NA-Bayes and plot program S-plot.)

%				M. Sambridge, (RSES, ANU)
%				Last revision Sept. 1999.

%*************************************************************************

% test script for NA
ndin=3;
rangein=zeros(2,ndin);
rangein(1,:)=[0 0 10];
rangein(2,:)=[100 2 50];

% load boundaries of input parameters
load na_param_inc.mat

% create Sobol sequence with nd*nsample numbers
sobol=NA_sobol(ndin,1000,0);

%					Set up all dimensions for
%					arrays used by NA routines
misfit=zeros(nmod_max);
sum=zeros(1,nsample_max);
na_models=zeros(1,nd_max*nmod_max);
ranget=zeros(2,nd_max);
scales=zeros(1,nd_max+1);
na_model=zeros(1,nd_max);
xcur=zeros(nd_max);
header=zeros(1,nh_max);
mfitord=zeros(1,nsample_max);
work_NA1=zeros(1,nmod_max);
work_NA2=zeros(1,nmod_max);
iwork_NA1=zeros(1,nmod_max);
iwork_NA2=zeros(1,nsample_max);


% Some bookeeping variables not used by NA routines
model_opt=zeros(1,nd_max);

% Info and Logical unit common blocks used by NA routines
global  lu_na lu_out lu_sum lu_det lu_sob lu_dis lu_nad verbose debug timing summary
global 	nxsave ndsave ndc nerr ncald nupd cells torder taxis tup tcd tdev tna tres
global 	taxis2 iproc nproc lroot

%	Set up logical units
%	LU's for standard output
lu_out = 6;

%       Set up logical units for Neighbourhood Algorithm files
%	LU for input of NA options
lu_na = 30;
%	LU for input of quasi random number generator data (sobol sequence data)
lu_sob = 31;
%	LU for output of information summarising NA performance.
lu_sum = 32;
%	LU for output of more detailed information to file na.det
lu_det = 33;
%	LU for output of sample density in best voronoi cell
%	(Only used if calcmovement is set to true and NA_PDF is not used)

%	LU for NAD input/output file
lu_nad = 34;
%	LU for special info file
lu_dis = 35;

%	set up variables and start MPI
iproc = 0;
nproc = 1;
lroot = 0;

if (iproc==0)
    lroot = 0;
end

%	User specific setup for forward modelling
nd=ndin;
range(:,1:nd)=rangein(:,1:nd);
%call user_init(nd,range,scales)

%	Open NA input files
lu_na=fopen('NA/na.in');

%       Open NA output files
if (lroot)
    lu_sum=fopen('NA/na.sum');
end


%	Read in options for Neighbourhood algorithm.
[monte,istype,nsleep,noforward,nclean]=NA_options(nsample_max, nit_max, nmod_max,...
    nsleep_max, nd, nsamplei, nsample, ncells, itmax);


%	Close NA input files
fclose(lu_na);

%	set other info or debug options
check = 1;
check = 0;
calcmovement = 1;
calcmovement = 0;
if (calcmovement)
    if (lroot)
        lu_dis=fopen('distance');
    end
end

%	Initialize NA routines.
[restartNA,ranget,x]=NA_initialize(nd,nd_max,range,scales,nsample,ncells);

%       Generate or read in starting models
[na_models,misfit]=NA_initial_sample(istype,monte,nsample,nd,range,scales);

%	MAIN OPTIMIZATION LOOP
ntot = 0;
nxsavet = 0;
ndsavet = 0;
ndct = 0;
nerrt = 0;
ncald = 0;
nupd = 0;
taxist = 0;
taxist2 = 0;
tordert = 0;
tupt = 0;
tcdt = 0;
trest = 0;
tdevt = 0;
ttfor = 0;
tmpi = 0;
tmis = 0;
tnat = 0;
ns = nsamplei;


for it = 1:itmax+1
    
    %	Calculate misfit values for each model in the current population.
    if (summary && lroot)
        disp(['Start forward modeling iteration: ',num2str(it-1)])
    end
    
    %	skip forward modelling for starting models if they have been read in from a NAD file
    if (it~=1 && noforward~=1)
        %	Decode current model and put into array model.
        na_model=transform2raw(nd,range,scales,na_models);
        
        % solve forward problem
        misfitval=forward(nd, na_model);
        misfit = [misfit misfitval];
        na_models=[na_models na_model];
        
    end
    if (summary && lroot)
        disp('finished forward modeling')
    end
    
    %	Calculate properties of current misfit distribution.
    %	(Mean,min,best model etc.)
    [mfitmean,mfitminc,mfitmin,mfitord,mopt,ind]=NA_misfits(misfit)
    
    %	copy optimum model from current population, to array model_opt.
    model_opt=transform2raw(nd,range,scales,na_models(:,mopt));
    
    if (it<itmax+1)
        %	Call main NA routines
        if (monte)
            % Perform Monte Carlo search for comparison to NA.
            [na_model]=NA_random(nd,range,nsample);
        else
            % generate a new sample using Neighbourhood algorithm (resample version)
            [na_models,xcur,restartNA,work_NA1]=NA_sample(ntot,nsample,nd,nsleep,ncells,misfit,mfitord,ranget,check,xcur,calcmovement,nclean,work_NA1)
            
            % collect info statistics
            nxsavet = nxsavet + nxsave;
            ndsavet = ndsavet + ndsave;
            % acells(it) = cells;
            ndct = ndct + ndc;
            nerrt = nerrt + nerr;
            tordert = tordert + torder;
            tupt = tupt + tup;
            tcdt = tcdt + tcd;
            trest = trest + tres;
            tdevt = tdevt + tdev;
            taxist = taxist + taxis;
            % taxist2 = taxist2 + taxis2;
            tnat = tnat + tna;
        end
        
        %	FINISHED OPTIMIZATION LOOP
    else
        
        %	Some statistics
        if (summary && lroot)
            str='Performance statistics';
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Total number of x saves ',num2str(nxsavet)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Total number of d saves ',num2str(ndsavet)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Total number of distance evaluations ',num2str(ndct)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Total number of full dlist evaluations ',num2str(ncald)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Total number of partial dlist updates ',num2str(nupd)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Lowest misfit found ',num2str(mfitmin)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Average misfit over all models ',num2str(mfitmean)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Index of lowest misfit model ',num2str(mopt)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            
            %       if (check)
            %          NNval=nd*naxis*nsample*itmax;
            %          str=['Total number of NN values ',num2str(nnval)];
            %	   disp(str)
            %          fprintf(lu_sum,'%s\n',str)
            %          str=['Total number of errors ',num2str(nerrt)];
            %	   disp(str)
            %          fprintf(lu_sum,'%s\n',str)
            %       end
            
            str=['Total time spent updating dlist ',num2str(tupt)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Total time spent evaluating dlist ',num2str(tcdt)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Total time spent finding Voronoi intersections ',num2str(taxist)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Total time spent calculating random deviates ',num2str(tdevt)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Total time resetting random walks ',num2str(trest)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Total time for ordering misfits ',num2str(tmis)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Total time for NA-algorithm (without forward) ',num2str(tnat)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            str=['Total time for forward modeling ',num2str(ttfor)];
            disp(str)
            fprintf(lu_sum,'%s\n',str)
            
            %       if (verbose)
            %	   str='Average number of cells per axis for each sample';
            %          fprintf(lu_sum,'%s\n',str)
            %          fprintf(lu_sum,'%.2f',acells(ii),ii=1:itmax)
            %       end
        end
        
        %	transform all models back to scaled units
        na_models=transform2raw(nd,range,scales,na_models)
        
        nh = 1;
        %	call user supplied I/O routine
        %         if (lroot)
        %             call fprintfmodels(nd, ntot, na_models, misfit,nsamplei, nsample, itmax, nh_max, nh, header)
        %         end
        
        % fprintf out ensemble of models as a direct access file
        
        % add NA-info to begining of header file
        fnme = 'NA/na.nad';
        call NA_header(lu_nad,fnme,header,nh_max,nh,nd,range,scales,nsamplei,nsample,ncells,nh_user)
        
        if (summary && lroot)
            str=[' Total length of header in (nad) direct access model file = ',num2str(nh)];
            disp(str)
            disp(' Writing direct access file...'
        end
        %       fprintf direct access nad file
        fnme = 'NA/na.nad'
        if (lroot)
            call fprintf_nad(lu_nad,fnme,nd,ntot,nh,nh_user,header,1,na_models,misfit)
        end
        
        %	Close NA summary file
        if (lroot)
            fclose(lu_sum);
            fclose(lu_det)
        end
        fclose(lu_sob);
        if (calcmovement)
            fclose(lu_dis);
        end
        
        %	Advise of files created
        if (lroot)
            disp(' Files created:')
            dips(' na.nad : Direct access file containing ensemble of models ')
            disp(' na.sum : Short summary file of progress')
            if (verbose)
                disp(' na.det : Full details of progress')
            end
        end
        
        %         100    format(/1x,35('-')/
        %         &          1x,'|',33x,'|'/
        %         &          1x,'|',5x,'Parameter space search',6x,'|'/,
        %         &          1x,'|',' using a Neighbourhood Algorithm ','|'/
        %         &          1x,'|',33x,'|'/
        %         &          1x,35('-')/)
        
    end
    
end
